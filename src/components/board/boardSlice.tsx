import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export type ColumnType = {
  id: string;
  title?: string;
};

export type BoardState = {
  columnModalOpen: boolean;
  boardColumns: Array<ColumnType>;
  // status: 'idle' | 'loading' | 'failed';
};

const initialState: BoardState = {
  columnModalOpen: false,
  boardColumns: [],
  // status: 'idle',
};

export const boardSlice = createSlice({
  name: 'board',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    openColumnModal: (state) => {
      state.columnModalOpen = true;
    },
    closeColumnModal: (state) => {
      state.columnModalOpen = false;
    },
    addBoardColumn: (state, action: PayloadAction<ColumnType>) => {
      state.boardColumns.push(action.payload);
      console.log('add:' + action.payload.id);
    },
    deleteBoardColumn: (state, action: PayloadAction<ColumnType>) => {
      console.log('remove:' + action.payload.id);
      state.boardColumns = state.boardColumns.filter((el) => el.id !== action.payload.id);
      console.log('стейт:' + { state });
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const { openColumnModal, closeColumnModal, addBoardColumn, deleteBoardColumn } =
  boardSlice.actions;

export const selectColumnModalOpen = (state: RootState) => state.board.columnModalOpen;
export const selectBoardColumns = (state: RootState) => state.board.boardColumns;

export default boardSlice.reducer;
