import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export type DeleteColumnType = {
  isOpen: boolean;
  columnId: string | null;
};

export type ItemModalType = {
  isOpen: boolean;
  columnId: string | null;
};

export type ItemType = {
  id: string;
  title: string;
  description?: string;
};

export type ColumnType = {
  id: string;
  title?: string;
  items?: Array<ItemType>;
};

export type BoardState = {
  columnModalOpen: boolean;
  boardColumns: Array<ColumnType>;
  deleteColumnModalOpen: DeleteColumnType;
  itemModalOpen: ItemModalType;
  // status: 'idle' | 'loading' | 'failed';
};

const initialState: BoardState = {
  columnModalOpen: false,
  boardColumns: [],
  deleteColumnModalOpen: { isOpen: false, columnId: null },
  itemModalOpen: { isOpen: false, columnId: null },
  // status: 'idle',
};

export const boardSlice = createSlice({
  name: 'board',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    openColumnModal: (state) => {
      state.columnModalOpen = true;
    },
    closeColumnModal: (state) => {
      state.columnModalOpen = false;
    },
    addBoardColumn: (state, action: PayloadAction<ColumnType>) => {
      state.boardColumns.push(action.payload);
    },
    deleteBoardColumn: (state) => {
      state.boardColumns = state.boardColumns.filter(
        (el) => el.id !== state.deleteColumnModalOpen.columnId
      );
    },
    openDeleteColumnModal: (state, action: PayloadAction<ColumnType>) => {
      state.deleteColumnModalOpen.isOpen = true;
      state.deleteColumnModalOpen.columnId = action.payload.id;
    },
    closeDeleteColumnModal: (state) => {
      state.deleteColumnModalOpen.isOpen = false;
    },
    openItemModal: (state, action: PayloadAction<ColumnType>) => {
      state.itemModalOpen.isOpen = true;
      state.itemModalOpen.columnId = action.payload.id;
    },
    closeItemModal: (state) => {
      state.itemModalOpen.isOpen = false;
    },
    addNewItem: (state, action: PayloadAction<ItemType>) => {
      const column = state.boardColumns.find((el) => el.id === state.itemModalOpen.columnId);
      if (column) {
        if (!column.items) {
          column.items = [];
        }
        column.items!.push(action.payload);
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const {
  openColumnModal,
  closeColumnModal,
  addBoardColumn,
  deleteBoardColumn,
  openDeleteColumnModal,
  closeDeleteColumnModal,
  openItemModal,
  closeItemModal,
  addNewItem,
} = boardSlice.actions;

export const selectColumnModalOpen = (state: RootState) => state.board.columnModalOpen;
export const selectBoardColumns = (state: RootState) => state.board.boardColumns;
export const selectDeleteColumnModalOpen = (state: RootState) => state.board.deleteColumnModalOpen;
export const selectItemModalOpen = (state: RootState) => state.board.itemModalOpen;

export default boardSlice.reducer;
